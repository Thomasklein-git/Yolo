#!/usr/bin/env python3

import time
import warnings

import numpy as np
import matplotlib.pyplot as plt

from sklearn import cluster, datasets, mixture
from sklearn.neighbors import kneighbors_graph
from sklearn.preprocessing import StandardScaler
from itertools import cycle, islice
import cv2

img2 = cv2.imread("depth20.png",-1)
img = img2

#img = img.reshape(-1,1)
#min_gt0 = np.ma.array(img, mask=img<=0).min(0)
#img = np.where(img == 0, 28000, img)
P=[]
for i in range(0,216):
    for j in range(0,147):
        P.append([i,j,img[i][j]])
P = np.array(P)

P = StandardScaler().fit_transform(P)
dbscan = cluster.DBSCAN(eps=0.3)
dbscan.fit(P)
y_pred_img = dbscan.labels_.astype(np.int)
img3 = np.array(img.reshape(-1,1),dtype=np.uint8)
k = 0
for i in dbscan.labels_:
    
    if i == 0:
        img3[k] = 0
    if i == 1:
        img3[k] = 125
    if i == 2:
        img3[k] = 255
    k +=1

img3 = img3.reshape(216,147)

imgplot = plt.imshow(img3)
cv2.imshow("img",img3)
cv2.waitKey(20)

"""

n_samples = 1500
noisy_circles = datasets.make_circles(n_samples=n_samples, factor=.5, noise=.05)
random_state = 170
X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
transformation = [[0.6, -0.6], [-0.4, 0.8]]


plt.figure(figsize=(9 * 2 + 3, 12.5))
plt.subplots_adjust(left=.02, right=.98, bottom=.001, top=.96, wspace=.05,
                    hspace=.01)

default_base = {'quantile': .3,
                'eps': .3,
                'damping': .9,
                'preference': -200,
                'n_neighbors': 10,
                'n_clusters': 3,
                'min_samples': 20,
                'xi': 0.05,
                'min_cluster_size': 0.1}

plot_num = 1
datasets = [
    (noisy_circles, {'damping': .77, 'preference': -240,
                     'quantile': .2, 'n_clusters': 2,
                     'min_samples': 20, 'xi': 0.25})]


for i_dataset, (dataset, algo_params) in enumerate(datasets):
    X, y = dataset

    # normalize dataset for easier parameter selection
    X = StandardScaler().fit_transform(X)


dbscan = cluster.DBSCAN(eps=params['eps'])
dbscan.fit(X)
y_pred = dbscan.labels_.astype(np.int)

colors = np.array(list(islice(cycle(['#377eb8', '#ff7f00', '#4daf4a',
                                             '#f781bf', '#a65628', '#984ea3',
                                             '#999999', '#e41a1c', '#dede00']),
                                      int(max(y_pred_img) + 1))))
# add black color for outliers (if any)
colors = np.append(colors, ["#000000"])
for i in y_pred_img == 0:
    plt.plot(img, np.zeros_like(img),color='b')
else:
    plt.plot(img, np.zeros_like(img),color='r')
#plt.plot(img, np.zeros_like(img),'x')
plt.show()

plt.scatter(X[:, 0], X[:, 1], s=10, color=colors[y_pred_img])

plt.xlim(-2.5, 2.5)
plt.ylim(-2.5, 2.5)
plt.xticks(())
plt.yticks(())

#plot_num += 1

plt.show()
"""